using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Typeracer.Models;

// values of a player can change, so struct is used instead of record
// extension methods can be called to calculate the average WPM, average accuracy, best WPM and performance score
public class Player : IComparable<Player>
{
    [Key]
    public Guid PlayerID { get; private set; }  // changed from readonly for deserialization (private set for unreachable modification)
    
    [Required]
    public string Username { get; set; }
    public List<WPM> WPMs { get; set; } // each game average WPM should be added here
    public List<Accuracy> Accuracies { get; set; } // each game average accuracy should be added here
    
    
    public Guid? BestWPMID { get; set; }
    public Guid? BestAccuracyID { get; set; }
    
    [ForeignKey("BestWPMID")]
    public WPM BestWPM { get; set; }
    
    [ForeignKey("BestAccuracyID")]
    public Accuracy BestAccuracy { get; set; }
    
    // parameterless constructor for deserialization
    public Player()
    {
        WPMs = new List<WPM>();
        Accuracies = new List<Accuracy>();
    }


    public Player(string username, double initialWPM, double initialAccuracy)
    {
        PlayerID = Guid.NewGuid();
        Username = username;
        WPMs = new List<WPM>();
        Accuracies = new List<Accuracy>();
        BestWPMID = null;
        BestAccuracyID = null;
        AddGameResult(initialWPM, initialAccuracy);
        Console.WriteLine($"Player created: {PlayerID} - {username}");
    }
    
    public void AddGameResult(double wpm, double accuracy)
    {
        WPMs.Add(new WPM
        {
            Value = wpm, PlayerId = PlayerID
        });
        
        Accuracies.Add(new Accuracy
        {
            Value = accuracy, PlayerId = PlayerID
        });
        
        if (wpm > BestWPM.Value)
        {
            BestWPMID = WPMs[^1].WPMId; // if new wpm is larger than the existing best one, use the latest indexed/
                                        // /(most recent) wpm entry as the best result
        }

        if (accuracy > BestAccuracy.Value)
        {
            BestAccuracyID = Accuracies[^1].AccuracyId;
        }
    }

    // comparing players by their best WPM
    public int CompareTo(Player otherPlayer)
    {
        return BestWPM?.Value.CompareTo(otherPlayer.BestWPM?.Value) ?? 0;
    }
}


public class WPM
{
    [Key]
    public Guid WPMId { get; set; } = Guid.NewGuid(); // Ensure a new Guid is generated by default

    [ForeignKey("Player")]
    public Guid PlayerId { get; set; } // Foreign key to link to the Player
    public Player Player { get; set; } // Navigation property back to the Player

    public double Value { get; set; } // Store the WPM value 
    
    
}


public class Accuracy
{
    [Key]
    public Guid AccuracyId { get; set; } = Guid.NewGuid(); // Ensure a new Guid is generated by default

    [ForeignKey("Player")]
    public Guid PlayerId { get; set; } // Foreign key to link to the Player
    public Player Player { get; set; } // Navigation property back to the Player

    public double Value { get; set; } // Store the WPM value
        
}